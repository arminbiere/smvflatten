MODULE main
VAR
 -- UAV 0
nextp_0: 0..2;
previous_t_0: 1..2;
previous_p_0: 0..2;
previous_target_p_0: 0..2;
 -- UAV 1
nextp_1: 0..2;
previous_t_1: 1..2;
previous_p_1: 0..2;
previous_target_p_1: 0..2;
previous_cl_0:  -2..3;
previous_cl_1:  -2..3;
previous_cl_2:  -2..3;
previous_time_to_next_slot: 1..2;

DEFINE 
RD_0 := 3;
RD_1 := 3;
RD_2 := 2;

FTT_0_0 := 1;
FTT_0_1 := 2;
FTT_0_2 := 2;
FTT_1_0 := 2;
FTT_1_1 := 1;
FTT_1_2 := 2;
FTT_2_0 := 2;
FTT_2_1 := 2;
FTT_2_2 := 1;

ASSIGN next(error) := case (error = TRUE | cl_0 < time_to_next_slot | cl_1 < time_to_next_slot | cl_2 < time_to_next_slot) : TRUE;
 TRUE : FALSE;
 esac;

DEFINE min1 := case t_0 < t_1 : t_0 ; 1: t_1; esac;
DEFINE time_to_next_slot := min1;

DEFINE cl_0:= case (Delta_0 = 0 & p_0 = 0) | (Delta_1 = 0 & p_1 = 0): RD_0; 
 TRUE:  previous_cl_0 - previous_time_to_next_slot; esac;
DEFINE cl_1:= case (Delta_0 = 0 & p_0 = 1) | (Delta_1 = 0 & p_1 = 1): RD_1; 
 TRUE:  previous_cl_1 - previous_time_to_next_slot; esac;
DEFINE cl_2:= case (Delta_0 = 0 & p_0 = 2) | (Delta_1 = 0 & p_1 = 2): RD_2; 
 TRUE:  previous_cl_2 - previous_time_to_next_slot; esac;

----- UAV 0-----

ASSIGN 
init(previous_t_0):= 1;
init(previous_p_0):= 0;
DEFINE Delta_0 := previous_t_0 - previous_time_to_next_slot; 
DEFINE 
t_0 := 
case Delta_0 = 0 :
case  p_0 = 0: case  nextp_0 = 0 : FTT_0_0;
 nextp_0 = 1 : FTT_0_1;
 TRUE : FTT_0_2;
esac;
 p_0 = 1: case  nextp_0 = 0 : FTT_1_0;
 nextp_0 = 1 : FTT_1_1;
 TRUE : FTT_1_2;
esac;
 TRUE:
 case  nextp_0 = 0 : FTT_2_0;
 nextp_0 = 1 : FTT_2_1;
 TRUE : FTT_2_2;
esac;
esac;
TRUE: Delta_0; 
esac;

p_0:=
 case Delta_0 = 0: previous_target_p_0;
 TRUE: previous_p_0;
 esac;

target_p_0:= case Delta_0= 0: nextp_0;
 TRUE: previous_target_p_0;
 esac;



----- UAV 1-----

ASSIGN 
init(previous_t_1):= 1;
init(previous_p_1):= 0;
DEFINE Delta_1 := previous_t_1 - previous_time_to_next_slot; 
DEFINE 
t_1 := 
case Delta_1 = 0 :
case  p_1 = 0: case  nextp_1 = 0 : FTT_0_0;
 nextp_1 = 1 : FTT_0_1;
 TRUE : FTT_0_2;
esac;
 p_1 = 1: case  nextp_1 = 0 : FTT_1_0;
 nextp_1 = 1 : FTT_1_1;
 TRUE : FTT_1_2;
esac;
 TRUE:
 case  nextp_1 = 0 : FTT_2_0;
 nextp_1 = 1 : FTT_2_1;
 TRUE : FTT_2_2;
esac;
esac;
TRUE: Delta_1; 
esac;

p_1:=
 case Delta_1 = 0: previous_target_p_1;
 TRUE: previous_p_1;
 esac;

target_p_1:= case Delta_1= 0: nextp_1;
 TRUE: previous_target_p_1;
 esac;


ASSIGN 
init(previous_cl_0) := RD_0;
init(previous_cl_1) := RD_1;
init(previous_cl_2) := RD_2;

TRANS 
next(previous_cl_0) = cl_0 &
next(previous_cl_1) = cl_1 &
next(previous_cl_2) = cl_2 &
next(previous_t_0) = t_0 &
next(previous_p_0) = p_0 &
next(previous_target_p_0) = target_p_0 &
next(previous_t_1) = t_1 &
next(previous_p_1) = p_1 &
next(previous_target_p_1) = target_p_1

VAR
error:boolean;
ASSIGN
init(error) := FALSE;
init(previous_time_to_next_slot) := 1;
TRANS next(previous_time_to_next_slot) = time_to_next_slot

-- LTLSPEC F(error = TRUE)
SPEC AF(error = TRUE)
